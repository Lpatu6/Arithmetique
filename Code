import networkx as nx
import matplotlib.pyplot as plt


class Noeud:
    # Le constructeur
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

    # Méthode qui permet d'afficher la valeur
    # de la racine avec la fonction print
    def __str__(self):
        return str(self.value)

    def estFeuille(self):
        if not self.left and not self.right:
            return True
        else:
            return False


def hauteur(arbre):
    if arbre is None:
        return -1
    else:
        return 1 + max(hauteur(arbre.left), hauteur(arbre.right))


def repr_graph(arbre, size=(8, 8), null_node=False):
    """
    size : tuple de 2 entiers. Si size est int -> (size, size)
    null_node : si True, trace les liaisons vers les sous-arbres vides
    """
    def parkour(arbre, noeuds, branches, labels, positions, profondeur, pos_courante, pos_parent, null_node):
        if arbre is not None:
            noeuds[0].append(pos_courante)
            positions[pos_courante] = (pos_courante, profondeur)
            profondeur -= 1
            labels[pos_courante] = str(arbre.value)
            branches[0].append((pos_courante, pos_parent))
            pos_gauche = pos_courante - 2**profondeur
            parkour(arbre.left, noeuds, branches, labels, positions,
                    profondeur, pos_gauche, pos_courante, null_node)
            pos_droit = pos_courante + 2**profondeur
            parkour(arbre.right, noeuds, branches, labels, positions,
                    profondeur, pos_droit, pos_courante, null_node)
        elif null_node:
            noeuds[1].append(pos_courante)
            positions[pos_courante] = (pos_courante, profondeur)
            branches[1].append((pos_courante, pos_parent))

    if arbre == None:
        return

    branches = [[]]
    # il faut calculer la hauteur ou la faire passer en paramètre (racine hauteur = 0)
    profondeur = hauteur(arbre)
    pos_courante = 2**profondeur
    noeuds = [[pos_courante]]
    positions = {pos_courante: (pos_courante, profondeur)}
    labels = {pos_courante: str(arbre.value)}

    if null_node:
        branches.append([])
        noeuds.append([])

    profondeur -= 1
    parkour(arbre.left, noeuds, branches, labels, positions, profondeur,
            pos_courante - 2**profondeur, pos_courante, null_node)
    parkour(arbre.right, noeuds, branches, labels, positions, profondeur,
            pos_courante + 2**profondeur, pos_courante, null_node)

    mon_arbre = nx.Graph()

    if type(size) == int:
        size = (size, size)
    plt.figure(figsize=size)

    nx.draw_networkx_nodes(
        mon_arbre, positions, nodelist=noeuds[0], node_color="white", node_size=550, edgecolors="blue")
    nx.draw_networkx_edges(mon_arbre, positions,
                           edgelist=branches[0], edge_color="black", width=2)
    nx.draw_networkx_labels(mon_arbre, positions, labels)

    if null_node:
        nx.draw_networkx_nodes(
            mon_arbre, positions, nodelist=noeuds[1], node_color="white", node_size=50, edgecolors="grey")
        nx.draw_networkx_edges(
            mon_arbre, positions, edgelist=branches[1], edge_color="grey", width=1)

    ax = plt.gca()
    ax.margins(0.1)
    plt.axis("off")
    plt.show()
    plt.close()


arbre7 = Noeud(7)
arbre6 = Noeud(4)
arbre5 = Noeud("-", arbre6, arbre7)
arbre4 = Noeud(3)
arbre3 = Noeud("/", arbre4, arbre5)
arbre2 = Noeud(2)
arbre1 = Noeud("+", arbre2, arbre3)

repr_graph(arbre1, (4, 3), False)


def evalue(exp):
    if exp.estFeuille():
        return exp.value
    elif exp.value == "+":
        return evalue(exp.left) + evalue(exp.right)
    elif exp.value == "-":
        return evalue(exp.left) - evalue(exp.right)
    elif exp.value == "*":
        return evalue(exp.left) * evalue(exp.right)
    elif exp.value == "/":
        return evalue(exp.left) / evalue(exp.right)


print(evalue(arbre1))


def noeud(nom, fg=None, fd=None):
    return {"racine": nom, "fg": fg, "fd": fd}


def construit(arbre):
    if arbre == None:
        return []
    else:
        return [arbre["racine"], construit(arbre["fg"]), construit(arbre["fd"])]


arbre7 = noeud(7)
arbre6 = noeud(4)
arbre5 = noeud("-", arbre6, arbre7)
arbre4 = noeud(3)
arbre3 = noeud("/", arbre4, arbre5)
arbre2 = noeud(2)
arbre1 = noeud("+", arbre2, arbre3)
arbre = construit(arbre1)


def evalue2(exp):
    if exp == [] or exp[1] == [] or exp[2] == []:
        return exp[0]
    elif exp[0] == "+":
        return evalue2(exp[1]) + evalue2(exp[2])
    elif exp[0] == "-":
        return evalue2(exp[1]) - evalue2(exp[2])
    elif exp[0] == "*":
        return evalue2(exp[1]) * evalue2(exp[2])
    elif exp[0] == "/":
        return evalue2(exp[1]) / evalue2(exp[2])


print(evalue2(arbre))


def noeud(nom, fg=None, fd=None):
    return {"racine": nom, "fg": fg, "fd": fd}


def construit2(arbre):
    if arbre == None:
        return ()
    else:
        return (arbre["racine"], construit2(arbre["fg"]), construit2(arbre["fd"]))


arbre7 = noeud(7)
arbre6 = noeud(4)
arbre5 = noeud("-", arbre6, arbre7)
arbre4 = noeud(3)
arbre3 = noeud("/", arbre4, arbre5)
arbre2 = noeud(2)
arbre1 = noeud("+", arbre2, arbre3)
arbre = construit2(arbre1)


def evalue3(exp):
    if exp == () or exp[1] == () or exp[2] == ():
        return exp[0]
    elif exp[0] == "+":
        return evalue3(exp[1]) + evalue3(exp[2])
    elif exp[0] == "-":
        return evalue3(exp[1]) - evalue3(exp[2])
    elif exp[0] == "*":
        return evalue3(exp[1]) * evalue3(exp[2])
    elif exp[0] == "/":
        return evalue3(exp[1]) / evalue3(exp[2])


print(evalue3(arbre))


def to_parenthese(exp):
    if exp == () or exp[1] == () or exp[2] == ():
        return str(exp[0])
    elif exp[0] in ["+", "-", "*", "/"]:
        return f"({to_parenthese(exp[1])} {exp[0]} {to_parenthese(exp[2])})"


print(to_parenthese(arbre))
